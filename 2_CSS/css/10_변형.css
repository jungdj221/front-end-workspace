.box-container {
  height: 50vh;
  border: 1px solid black;
}
#box-container1 {
  display: flex;
  justify-content: center;
  align-items: center;
}
.box {
  width: 200px;
  height: 200px;
  border: 2px solid black;
  background-color: rgb(115, 150, 150, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 2rem;

  /* transition: 변환속성 애니메이션 시간; */
  transition: 1s cubic-bezier(0.4, 0, 1, 1);
  /* transition : all or transform or background(색깔만 변경) */
}
.box:hover {
  background-color: rgb(167, 167, 107, 0.8);

  /* transform: 변형함수(); */
  /* scale : 지정한 크기만큼 확대/축소하는 함수 */
  transform: scale(2);
  /* rotate : 짖어한 각도만큼 회전 시키는 함수 */
  transform: rotate(30deg);
  /* skew : 지정한 각도만큼 비틀어 왜곡하는 함수 */
  transform: skew(-120deg);
  /* translate : x축, y축, z축 방향으로 이동시키는 함수 */
  transform: skewY(-30deg);
  transform: translate(20px, 50px);
  transform: scale(1.5) rotate(14deg);

  /* transform-origin : 변형의 기준점을 변경하는 속성 */
  transform-origin: left top;
  transform-origin: right bottom;
}

/* animation */
.box-container {
  width: 1200px;
  height: 600px;
}
.animation-box {
  box-sizing: border-box;
  width: 200px;
  height: 200px;
  border: 2px solid black;
  background: indigo;
  color: white;
  font-size: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  /* animation : name duration iteration-count timing-funcation delay direction;
      - name : 설정된 keyframe 지정
      - duration : 실행 시간 지정
      - itereation-count : 반복 횟수 지정
      - timing-funcation : 속도 형태 지정
      - delay : 대기 시간을 지정
      - direction : 진행 형태 지정
  */
  animation: boxAni 5s linear;
  animation: boxAni 5s linear 3;
  animation: boxAni 5s linear infinite;
  animation: boxAni 5s linear infinite alternate-reverse;
  animation: boxAni 5s linear forwards;
  animation: boxAni 5s linear infinite alternate;
}
.animation-box:hover {
  animation-play-state: paused;
  background-color: salmon;
}

/* 
  @keyframes 애니메이션 이름 {
    from {시작 프레임 설정}
    to {끝 프레임 설정}
    % {단위로 지정 가능}
  }
*/
@keyframes boxAni {
  0% {
    transform: translate(0, 0);
  }
  50% {
    transform: translate(1000px, 0);
  }
  100% {
    transform: translate(1000px, 400px);
  }
}

/* 3D */
#box-container3 {
  display: flex;
  justify-content: center;
  align-items: center;
}
#box-container3:hover .card {
  transform: rotateY(180deg);
}
.card {
  width: 200px;
  height: 200px;
  background-image: url(../../resources/blueberries_480.jpg);
  background-size: cover;
  background-position: center;
  transform: rotate(45deg);
  transform: perspective(400px) rotateY(45deg);
  transform: rotateY(0deg);
  transition: 3s;
  position: relative;
  transform-style: preserve-3d;
}
.card-item {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
}
.card-item-front {
  background-image: url(../../resources/blueberries_480.jpg);
  background-size: cover;
  background-position: center;
  z-index: 1;
  /* backface-visibility
    - 요소가 회전하여 뒷면이 보일 경우 표시여부를 지정하는 속성
  */
  backface-visibility: hidden;
}
.card-item-back {
  background-color: cadetblue;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  font-size: 2rem;
  color: white;
  transform: rotateY(-180deg);
}
